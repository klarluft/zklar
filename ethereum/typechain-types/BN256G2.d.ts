/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BN256G2Interface extends ethers.utils.Interface {
  functions: {
    "ECTwistAdd(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "ECTwistMul(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "GetFieldModulus()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ECTwistAdd",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ECTwistMul",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "GetFieldModulus",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ECTwistAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ECTwistMul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GetFieldModulus",
    data: BytesLike
  ): Result;

  events: {};
}

export class BN256G2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BN256G2Interface;

  functions: {
    ECTwistAdd(
      pt1xx: BigNumberish,
      pt1xy: BigNumberish,
      pt1yx: BigNumberish,
      pt1yy: BigNumberish,
      pt2xx: BigNumberish,
      pt2xy: BigNumberish,
      pt2yx: BigNumberish,
      pt2yy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    ECTwistMul(
      s: BigNumberish,
      pt1xx: BigNumberish,
      pt1xy: BigNumberish,
      pt1yx: BigNumberish,
      pt1yy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    GetFieldModulus(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ECTwistAdd(
    pt1xx: BigNumberish,
    pt1xy: BigNumberish,
    pt1yx: BigNumberish,
    pt1yy: BigNumberish,
    pt2xx: BigNumberish,
    pt2xy: BigNumberish,
    pt2yx: BigNumberish,
    pt2yy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  ECTwistMul(
    s: BigNumberish,
    pt1xx: BigNumberish,
    pt1xy: BigNumberish,
    pt1yx: BigNumberish,
    pt1yy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  GetFieldModulus(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ECTwistAdd(
      pt1xx: BigNumberish,
      pt1xy: BigNumberish,
      pt1yx: BigNumberish,
      pt1yy: BigNumberish,
      pt2xx: BigNumberish,
      pt2xy: BigNumberish,
      pt2yx: BigNumberish,
      pt2yy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    ECTwistMul(
      s: BigNumberish,
      pt1xx: BigNumberish,
      pt1xy: BigNumberish,
      pt1yx: BigNumberish,
      pt1yy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    GetFieldModulus(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ECTwistAdd(
      pt1xx: BigNumberish,
      pt1xy: BigNumberish,
      pt1yx: BigNumberish,
      pt1yy: BigNumberish,
      pt2xx: BigNumberish,
      pt2xy: BigNumberish,
      pt2yx: BigNumberish,
      pt2yy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ECTwistMul(
      s: BigNumberish,
      pt1xx: BigNumberish,
      pt1xy: BigNumberish,
      pt1yx: BigNumberish,
      pt1yy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetFieldModulus(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ECTwistAdd(
      pt1xx: BigNumberish,
      pt1xy: BigNumberish,
      pt1yx: BigNumberish,
      pt1yy: BigNumberish,
      pt2xx: BigNumberish,
      pt2xy: BigNumberish,
      pt2yx: BigNumberish,
      pt2yy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ECTwistMul(
      s: BigNumberish,
      pt1xx: BigNumberish,
      pt1xy: BigNumberish,
      pt1yx: BigNumberish,
      pt1yy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetFieldModulus(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
