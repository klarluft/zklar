/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DepositContractInterface extends ethers.utils.Interface {
  functions: {
    "deposit(((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256,uint256)": FunctionFragment;
    "depositContractAddress()": FunctionFragment;
    "pendingDepositsBalances(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      {
        a: { X: BigNumberish; Y: BigNumberish };
        b: { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] };
        c: { X: BigNumberish; Y: BigNumberish };
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDepositsBalances",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDepositsBalances",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
}

export type DepositEvent = TypedEvent<[BigNumber] & { leaf_digest: BigNumber }>;

export class DepositContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DepositContractInterface;

  functions: {
    deposit(
      proof: {
        a: { X: BigNumberish; Y: BigNumberish };
        b: { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] };
        c: { X: BigNumberish; Y: BigNumberish };
      },
      leaf_digest: BigNumberish,
      output: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositContractAddress(overrides?: CallOverrides): Promise<[string]>;

    pendingDepositsBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  deposit(
    proof: {
      a: { X: BigNumberish; Y: BigNumberish };
      b: { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] };
      c: { X: BigNumberish; Y: BigNumberish };
    },
    leaf_digest: BigNumberish,
    output: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositContractAddress(overrides?: CallOverrides): Promise<string>;

  pendingDepositsBalances(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    deposit(
      proof: {
        a: { X: BigNumberish; Y: BigNumberish };
        b: { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] };
        c: { X: BigNumberish; Y: BigNumberish };
      },
      leaf_digest: BigNumberish,
      output: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositContractAddress(overrides?: CallOverrides): Promise<string>;

    pendingDepositsBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Deposit(uint256)"(
      leaf_digest?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { leaf_digest: BigNumber }>;

    Deposit(
      leaf_digest?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { leaf_digest: BigNumber }>;
  };

  estimateGas: {
    deposit(
      proof: {
        a: { X: BigNumberish; Y: BigNumberish };
        b: { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] };
        c: { X: BigNumberish; Y: BigNumberish };
      },
      leaf_digest: BigNumberish,
      output: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDepositsBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      proof: {
        a: { X: BigNumberish; Y: BigNumberish };
        b: { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] };
        c: { X: BigNumberish; Y: BigNumberish };
      },
      leaf_digest: BigNumberish,
      output: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingDepositsBalances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
