/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ZKlarContractInterface extends ethers.utils.Interface {
  functions: {
    "currentIndex()": FunctionFragment;
    "newRootDigestVerifierContractAddress()": FunctionFragment;
    "nullifiers(uint256)": FunctionFragment;
    "rootDigest()": FunctionFragment;
    "rootDigests(uint256)": FunctionFragment;
    "setNullifier(uint256)": FunctionFragment;
    "setRootDigest(uint256)": FunctionFragment;
    "transact((uint256,uint256,uint256,uint256),(uint256[2],uint256[2][2],uint256[2]),(uint256,uint256,uint256),(uint256[2],uint256[2][2],uint256[2]),(uint256[2],uint256[2][2],uint256[2]))": FunctionFragment;
    "transactionVerifierContractAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newRootDigestVerifierContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rootDigest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rootDigests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNullifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootDigest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transact",
    values: [
      {
        newCommitment0Digest: BigNumberish;
        newCommitment0RootDigest: BigNumberish;
        newCommitment1Digest: BigNumberish;
        newCommitment1RootDigest: BigNumberish;
      },
      {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      {
        rootDigest: BigNumberish;
        commitment0Nullifier: BigNumberish;
        commitment1Nullifier: BigNumberish;
      },
      {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionVerifierContractAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "currentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newRootDigestVerifierContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootDigest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rootDigests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRootDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionVerifierContractAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class ZKlarContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZKlarContractInterface;

  functions: {
    currentIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    newRootDigestVerifierContractAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    nullifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rootDigest(overrides?: CallOverrides): Promise<[BigNumber]>;

    rootDigests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setNullifier(
      _nullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRootDigest(
      _rootDigest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transact(
      _transactionNewDigests: {
        newCommitment0Digest: BigNumberish;
        newCommitment0RootDigest: BigNumberish;
        newCommitment1Digest: BigNumberish;
        newCommitment1RootDigest: BigNumberish;
      },
      _transactionProof: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      _transactionProofInputs: {
        rootDigest: BigNumberish;
        commitment0Nullifier: BigNumberish;
        commitment1Nullifier: BigNumberish;
      },
      _newRootDigestProof0: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      _newRootDigestProof1: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transactionVerifierContractAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

  newRootDigestVerifierContractAddress(
    overrides?: CallOverrides
  ): Promise<string>;

  nullifiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  rootDigest(overrides?: CallOverrides): Promise<BigNumber>;

  rootDigests(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  setNullifier(
    _nullifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRootDigest(
    _rootDigest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transact(
    _transactionNewDigests: {
      newCommitment0Digest: BigNumberish;
      newCommitment0RootDigest: BigNumberish;
      newCommitment1Digest: BigNumberish;
      newCommitment1RootDigest: BigNumberish;
    },
    _transactionProof: {
      a: [BigNumberish, BigNumberish];
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
      c: [BigNumberish, BigNumberish];
    },
    _transactionProofInputs: {
      rootDigest: BigNumberish;
      commitment0Nullifier: BigNumberish;
      commitment1Nullifier: BigNumberish;
    },
    _newRootDigestProof0: {
      a: [BigNumberish, BigNumberish];
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
      c: [BigNumberish, BigNumberish];
    },
    _newRootDigestProof1: {
      a: [BigNumberish, BigNumberish];
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
      c: [BigNumberish, BigNumberish];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transactionVerifierContractAddress(
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    newRootDigestVerifierContractAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    nullifiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    rootDigest(overrides?: CallOverrides): Promise<BigNumber>;

    rootDigests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setNullifier(
      _nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRootDigest(
      _rootDigest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transact(
      _transactionNewDigests: {
        newCommitment0Digest: BigNumberish;
        newCommitment0RootDigest: BigNumberish;
        newCommitment1Digest: BigNumberish;
        newCommitment1RootDigest: BigNumberish;
      },
      _transactionProof: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      _transactionProofInputs: {
        rootDigest: BigNumberish;
        commitment0Nullifier: BigNumberish;
        commitment1Nullifier: BigNumberish;
      },
      _newRootDigestProof0: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      _newRootDigestProof1: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    transactionVerifierContractAddress(
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    newRootDigestVerifierContractAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nullifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rootDigest(overrides?: CallOverrides): Promise<BigNumber>;

    rootDigests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNullifier(
      _nullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRootDigest(
      _rootDigest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transact(
      _transactionNewDigests: {
        newCommitment0Digest: BigNumberish;
        newCommitment0RootDigest: BigNumberish;
        newCommitment1Digest: BigNumberish;
        newCommitment1RootDigest: BigNumberish;
      },
      _transactionProof: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      _transactionProofInputs: {
        rootDigest: BigNumberish;
        commitment0Nullifier: BigNumberish;
        commitment1Nullifier: BigNumberish;
      },
      _newRootDigestProof0: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      _newRootDigestProof1: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transactionVerifierContractAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newRootDigestVerifierContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nullifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootDigest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootDigests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNullifier(
      _nullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRootDigest(
      _rootDigest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transact(
      _transactionNewDigests: {
        newCommitment0Digest: BigNumberish;
        newCommitment0RootDigest: BigNumberish;
        newCommitment1Digest: BigNumberish;
        newCommitment1RootDigest: BigNumberish;
      },
      _transactionProof: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      _transactionProofInputs: {
        rootDigest: BigNumberish;
        commitment0Nullifier: BigNumberish;
        commitment1Nullifier: BigNumberish;
      },
      _newRootDigestProof0: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      _newRootDigestProof1: {
        a: [BigNumberish, BigNumberish];
        b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
        c: [BigNumberish, BigNumberish];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transactionVerifierContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
