import "hashes/poseidon/poseidon" as poseidon

struct MerkleProofStep {
  u8 index_position
  field[6] digests
}

def verifyMerkleProof<NrOfSteps>(field root_digest, field leaf_digest, MerkleProofStep[NrOfSteps] merkle_proof) -> bool:
  field current_digest = leaf_digest

  for u32 i in 0..NrOfSteps do
    MerkleProofStep current_step = merkle_proof[i]

    field digest_0 = if current_step.index_position == 0 then current_digest else current_step.digests[0] fi
    field digest_1 = if current_step.index_position == 1 then current_digest else current_step.digests[1] fi
    field digest_2 = if current_step.index_position == 2 then current_digest else current_step.digests[2] fi
    field digest_3 = if current_step.index_position == 3 then current_digest else current_step.digests[3] fi
    field digest_4 = if current_step.index_position == 4 then current_digest else current_step.digests[4] fi
    field digest_5 = if current_step.index_position == 5 then current_digest else current_step.digests[5] fi

    current_digest = poseidon([\
      digest_0, \
      digest_1, \
      digest_2, \
      digest_3, \
      digest_4, \
      digest_5 \
    ])
  endfor

  assert(current_digest == root_digest)
  return true

def main(\
  field root_digest, \
  private field leaf_digest, \
  private MerkleProofStep[2] merkle_proof \
):
  assert(verifyMerkleProof(root_digest, leaf_digest, merkle_proof))

  return