import "hashes/poseidon/poseidon" as poseidon

def verifyNewDigest( \
  field leaf_digest, \
  field nonce, \
  field amount, \
  field owner_digest \
) -> bool:
  field leaf_digest_test = poseidon([ \
    nonce, \
    amount, \
    owner_digest \
  ])

  assert(leaf_digest_test == leaf_digest)

  return true

def verifyOwnership( \
  field nullifier, \
  field leaf_digest, \
  field nonce, \
  field amount, \
  field owner_digest, \
  field[2] owner_digest_preimage \
) -> bool:
  field leaf_digest_test = poseidon([ \
    nonce, \
    amount, \
    owner_digest \
  ])

  assert(leaf_digest_test == leaf_digest)

  field owner_digest_test = poseidon(owner_digest_preimage)

  assert(owner_digest_test == owner_digest)

  field nullifier_test = poseidon([ \
    leaf_digest, \
    owner_digest_preimage[0], \
    owner_digest_preimage[1] \
  ])

  assert(nullifier_test == nullifier)

  return true

const u32[32] powers_of_two = [
  1,
  2,
  4,
  8,
  16,
  32,
  64,
  128,
  256,
  512,
  1024,
  2048,
  4096,
  8192,
  16384,
  32768,
  65536,
  131072,
  262144,
  524288,
  1048576,
  2097152,
  4194304,
  8388608,
  16777216,
  33554432,
  67108864,
  134217728,
  268435456,
  536870912,
  1073741824,
  2147483648
]

def merkleTreeProof( \
  field root_digest, \
  field leaf_digest, \
  u32 leaf_index, \
  field[32] siblings \
) -> bool:
  field current_digest = leaf_digest

  for u32 i in 0..32 do
    field sibling = siblings[i]
    bool sibling_on_the_left = leaf_index & powers_of_two[i] == powers_of_two[i]

    field left = if sibling_on_the_left \
      then sibling \
      else current_digest \
    fi

    field right = if sibling_on_the_left \
      then current_digest \
      else sibling \
    fi

    current_digest = if sibling == 0 \
      then current_digest \
      else poseidon([left, right]) \
    fi
  endfor

  assert(current_digest == root_digest)

  return true

def main( \
  field root_digest, \
  field acc0_nullifier, \
  private field acc0_leaf_digest, \
  private field acc0_nonce, \
  private field acc0_amount, \
  private field acc0_owner_digest, \
  private field[2] acc0_owner_digest_preimage, \
  private u32 acc0_leaf_index, \
  private field[32] acc0_siblings, \
  field acc1_nullifier, \
  private field acc1_leaf_digest, \
  private field acc1_nonce, \
  private field acc1_amount, \
  private field acc1_owner_digest, \
  private field[2] acc1_owner_digest_preimage, \
  private u32 acc1_leaf_index, \
  private field[32] acc1_siblings, \
  field new0_leaf_digest, \
  private field new0_nonce, \
  private field new0_amount, \
  private field new0_owner_digest, \
  field new1_leaf_digest, \
  private field new1_nonce, \
  private field new1_amount, \
  private field new1_owner_digest \
):
  assert(verifyOwnership( \
    acc0_nullifier, \
    acc0_leaf_digest, \
    acc0_nonce, \
    acc0_amount, \
    acc0_owner_digest, \
    acc0_owner_digest_preimage \
  ))

  assert(verifyOwnership( \
    acc1_nullifier, \
    acc1_leaf_digest, \
    acc1_nonce, \
    acc1_amount, \
    acc1_owner_digest, \
    acc1_owner_digest_preimage \
  ))

  assert(merkleTreeProof( \
    root_digest, \
    acc0_leaf_digest, \
    acc0_leaf_index, \
    acc0_siblings \
  ))

  assert(merkleTreeProof( \
    root_digest, \
    acc1_leaf_digest, \
    acc1_leaf_index, \
    acc1_siblings \
  ))

  assert(verifyNewDigest( \
    new0_leaf_digest, \
    new0_nonce, \
    new0_amount, \
    new0_owner_digest \
  ))

  assert(verifyNewDigest( \
    new1_leaf_digest, \
    new1_nonce, \
    new1_amount, \
    new1_owner_digest \
  ))

  field acc_amount = acc0_amount + acc1_amount
  field new_amount = new0_amount + new1_amount

  assert(acc_amount == new_amount)
  return
